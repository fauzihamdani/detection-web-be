import { OnvifServiceBase, OnvifServiceBaseConfigs } from './service-base';
import { Result } from './soap';
import { ConfigurationTokenParams, ProfileTokenParams } from './service-media';
export declare class OnvifServicePtz extends OnvifServiceBase {
    constructor(configs: OnvifServicePtzConfigs);
    getNodes(): Promise<Result>;
    getNode(params: NodeTokenParams): Promise<Result>;
    getConfigurations(): Promise<Result>;
    getConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getStatus(): Promise<Result>;
    continuousMove(params: ContinuousMoveParams): Promise<Result>;
    absoluteMove(params: AbsoluteMoveParams): Promise<Result>;
    relativeMove(params: RelativeMoveParams): Promise<Result>;
    stop(params: StopParams): Promise<Result>;
    gotoHomePosition(params: GotoHomePositionParams): Promise<Result>;
    setHomePosition(params: ProfileTokenParams): Promise<Result>;
    setPreset(params: SetPresetParams): Promise<Result>;
    getPresets(params: ProfileTokenParams): Promise<Result>;
    gotoPreset(params: GotoPresetParams): Promise<Result>;
    removePreset(params: RemovePresetParams): Promise<Result>;
}
export interface OnvifServicePtzConfigs extends OnvifServiceBaseConfigs {
    timeDiff: number;
}
export interface NodeTokenParams {
    NodeToken: string;
}
export interface ContinuousMoveParams {
    ProfileToken: string;
    Velocity: {
        x: number;
        y: number;
        z: number;
    };
    Timeout?: number;
}
export interface AbsoluteMoveParams {
    ProfileToken: string;
    Position: {
        x: number;
        y: number;
        z: number;
    };
    Speed: {
        x: number;
        y: number;
        z: number;
    };
}
export interface RelativeMoveParams {
    ProfileToken: string;
    Translation: {
        x: number;
        y: number;
        z: number;
    };
    Speed: {
        x: number;
        y: number;
        z: number;
    };
}
export interface StopParams {
    ProfileToken: string;
    PanTilt?: boolean;
    Zoom?: boolean;
}
export interface GotoHomePositionParams {
    ProfileToken: string;
    Speed?: number;
}
export declare type SetPresetParams = {
    ProfileToken: string;
} & ({
    PresetToken: string;
} | {
    PresetName: string;
});
export interface GotoPresetParams {
    ProfileToken: string;
    PresetToken: string;
    Speed?: {
        x: number;
        y: number;
        z: number;
    };
}
export interface RemovePresetParams {
    ProfileToken: string;
    PresetToken: string;
}
