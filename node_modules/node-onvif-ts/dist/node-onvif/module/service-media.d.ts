import { OnvifServiceBase, OnvifServiceBaseConfigs } from './service-base';
import { Result } from './soap';
export declare class OnvifServiceMedia extends OnvifServiceBase {
    constructor(configs: OnvifServiceMediaConfigs);
    getStreamUri(params: GetStreamUriParams): Promise<Result>;
    getVideoEncoderConfigurations(): Promise<Result>;
    getVideoEncoderConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getCompatibleVideoEncoderConfigurations(params: ConfigurationTokenParams): Promise<Result>;
    getVideoEncoderConfigurationOptions(params: ProfileAndConfigurationTokenOptionalParams): Promise<Result>;
    getGuaranteedNumberOfVideoEncoderInstances(params: ConfigurationTokenParams): Promise<Result>;
    getProfiles(): Promise<Result>;
    getProfile(params: ProfileTokenParams): Promise<Result>;
    createProfile(params: CreateProfileParams): Promise<Result>;
    deleteProfile(params: ProfileTokenParams): Promise<Result>;
    getVideoSources(): Promise<Result>;
    getVideoSourceConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getVideoSourceConfigurations(): Promise<Result>;
    addVideoSourceConfiguration(params: ProfileAndConfigurationTokenParams): Promise<Result>;
    getCompatibleVideoSourceConfigurations(params: ProfileTokenParams): Promise<Result>;
    getVideoSourceConfigurationOptions(params: ProfileAndConfigurationTokenOptionalParams): Promise<Result>;
    getMetadataConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getMetadataConfigurations(): Promise<Result>;
    addMetadataConfiguration(params: ProfileAndConfigurationTokenParams): Promise<Result>;
    getCompatibleMetadataConfigurations(params: ProfileTokenParams): Promise<Result>;
    getMetadataConfigurationOptions(params: ProfileAndConfigurationTokenOptionalParams): Promise<Result>;
    getAudioSources(): Promise<Result>;
    getAudioSourceConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getAudioSourceConfigurations(): Promise<Result>;
    addAudioSourceConfiguration(params: ProfileAndConfigurationTokenParams): Promise<Result>;
    getCompatibleAudioSourceConfigurations(params: ProfileTokenParams): Promise<Result>;
    getAudioSourceConfigurationOptions(params: ProfileAndConfigurationTokenOptionalParams): Promise<Result>;
    getAudioEncoderConfiguration(params: ConfigurationTokenParams): Promise<Result>;
    getAudioEncoderConfigurations(): Promise<Result>;
    addAudioEncoderConfiguration(params: ProfileAndConfigurationTokenParams): Promise<Result>;
    getCompatibleAudioEncoderConfigurations(params: ProfileTokenParams): Promise<Result>;
    getAudioEncoderConfigurationOptions(params: ProfileAndConfigurationTokenOptionalParams): Promise<Result>;
    startMulticastStreaming(params: ProfileTokenParams): Promise<Result>;
    stopMulticastStreaming(params: ProfileTokenParams): Promise<Result>;
    GetSnapshotUri(params: ProfileTokenParams): Promise<Result>;
}
export interface OnvifServiceMediaConfigs extends OnvifServiceBaseConfigs {
    timeDiff: number;
}
export interface ConfigurationTokenParams {
    ConfigurationToken: string;
}
export interface ProfileAndConfigurationTokenOptionalParams {
    ProfileToken?: string;
    ConfigurationToken?: string;
}
export interface GetStreamUriParams {
    ProfileToken: string;
    Protocol: 'UDP' | 'HTTP' | 'RTSP';
}
export interface ProfileTokenParams {
    ProfileToken: string;
}
export interface CreateProfileParams {
    Name: string;
    Token?: string;
}
export interface ProfileAndConfigurationTokenParams {
    ProfileToken: string;
    ConfigurationToken: string;
}
